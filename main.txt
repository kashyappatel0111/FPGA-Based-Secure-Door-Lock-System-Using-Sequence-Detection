module lock_detector(
    input wire clk,                  // 50 MHz clock input
    input wire [3:0] sw,             // 4-bit password input (switches)
    input wire confirm_button,       // Push button for confirmation
    output reg [7:0] seg,            // 7-segment display segments
    output reg [3:0] an              // Anode control (only one digit used)
);

    // Built-in password (1010)
    parameter [3:0] PASSWORD = 4'b1010;
   
    // Register to store button press
    reg button_latch;
    reg [1:0] state;                 // State machine for display control
    reg [24:0] counter;              // Counter for timing
    reg [3:0] input_display;         // Register to store input for display

    // State encoding
    localparam DISPLAY_INPUT = 2'b00;
    localparam DISPLAY_RESULT = 2'b01;

    // Synchronize button press to avoid glitches
    always @(posedge clk) begin
        button_latch <= confirm_button;
    end

    // State machine and counter logic
    always @(posedge clk) begin
        if (button_latch) begin
            if (state == DISPLAY_INPUT) begin
                input_display <= sw; // Store the input for display
                state <= DISPLAY_RESULT;
                counter <= 0;
            end else if (counter < 25'd50000000) begin // Adjust the counter limit for timing
                counter <= counter + 1;
            end else begin
                state <= DISPLAY_INPUT;
            end
        end else begin
            state <= DISPLAY_INPUT;
        end
    end

    // Seven-segment decoder and anode control
    always @(*) begin
        an = 4'b0001; // Enable only the first digit (active low)
       
        case (state)
            DISPLAY_INPUT: begin
                // Display the input from switches
                case (input_display)
                    4'b0000: seg = 8'b00000011; // '0'
                    4'b0001: seg = 8'b10011111; // '1'
                    4'b0010: seg = 8'b00100101; // '2'
                    4'b0011: seg = 8'b00001101; // '3'
                    4'b0100: seg = 8'b10011001; // '4'
                    4'b0101: seg = 8'b01001001; // '5'
                    4'b0110: seg = 8'b01000001; // '6'
                    4'b0111: seg = 8'b00011111; // '7'
                    4'b1000: seg = 8'b00000001; // '8'
                    4'b1001: seg = 8'b00001001; // '9'
                    4'b1010: seg = 8'b00010001; // 'A'
                    4'b1011: seg = 8'b11000001; // 'B'
                    4'b1100: seg = 8'b01100011; // 'C'
                    4'b1101: seg = 8'b10000101; // 'D'
                    4'b1110: seg = 8'b01100001; // 'E'
                    4'b1111: seg = 8'b01110001; // 'F'
                    default: seg = 8'b11111111; // Turn off display
                endcase
            end
            DISPLAY_RESULT: begin
                // Display 'C' or 'O' based on password match
                if (sw == PASSWORD)
                    seg = 8'b00000011; // 'O' (open)
                else
                    seg = 8'b01100010; // 'C' (closed)
            end
            default: seg = 8'b11111111; // Turn off display
        endcase
    end

endmodule